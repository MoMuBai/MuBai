在Android开发中，为了防止内存溢出，在处理一些占用内存大而且生命周期较长的对象时候，尽量应用软引用和弱引用。

假设我们的应用会用到大量的默认图片，比如应用中有默认的头像，默认游戏图标等等，这些图片很多地方会用到。如果每次都去读取图片，
由于读取文件需要硬件操作，速度较慢，会导致性能较低。所以我们考虑将图片缓存起来，需要的时候直接从内存中读取。但是，由于图片占用内存空间比较大，
缓存很多图片需要很多的内存，就可能比较容易发生OutOfMemory异常。这时，我们可以考虑使用软引用技术来避免这个问题发生。
首先定义一个HashMap，保存软引用对象。


private Map<String, SoftReference<Bitmap>> imageCache = new HashMap<String, SoftReference<Bitmap>>();

再来定义一个方法，保存Bitmap的软引用到HashMap。

public void addBitmapToCache(String path) {
        // 强引用的Bitmap对象
        Bitmap bitmap = BitmapFactory.decodeFile(path);
        // 软引用的Bitmap对象
        SoftReference<Bitmap> softBitmap = new SoftReference<Bitmap>(bitmap);
        // 添加该对象到Map中使其缓存
        imageCache.put(path, softBitmap);
    }


获取的时候，可以通过SoftReference的get()方法得到Bitmap对象。

public Bitmap getBitmapByPath(String path) {
    // 从缓存中取软引用的Bitmap对象
    SoftReference<Bitmap> softBitmap = imageCache.get(path);
    // 判断是否存在软引用
    if (softBitmap == null) {
        return null;
    }
    // 取出Bitmap对象，如果由于内存不足Bitmap被回收，将取得空
    Bitmap bitmap = softBitmap.get();
    return bitmap;
}

使用软引用以后，在OutOfMemory异常发生之前，这些缓存的图片资源的内存空间可以被释放掉的，从而避免内存达到上限，避免Crash发生。
需要注意的是，在垃圾回收器对这个Java对象回收前，SoftReference类所提供的get方法会返回Java对象的强引用，一旦垃圾线程回收该Java对象之后，
get方法将返回null。所以在获取软引用对象的代码中，一定要判断是否为null，以免出现NullPointerException异常导致应用崩溃。


在Android应用里，最耗费内存的就是图片资源。而且在Android系统中，读取位图Bitmap时，分给虚拟机中的图片的堆栈大小只有8M，如果超出了，
就会出现OutOfMemory异常。所以，对于图片的内存优化，是Android应用开发中比较重要的内容。



(一)对象的引用类型：强引用、软引用、弱引用和虚引用：http://zhangjunhd.blog.51cto.com/113473/53092/

    1.强引用StrongReference是最普通的引用，如果一个对象被强引用引用，那么GC绝不会去回收它，在内存不足的时候宁愿去抛出OOM，
      也不会去随意回收具有强引用的对象

    2.软引用SoftReference,如果一个对象具有软引用，如果内存足够的话，GC就不会去回收它，如果内存不足了就会去回收它，
      SoftReference可以用来实现内存敏感的高速缓存，SoftReference可以和一个引用队列ReferenceQueue使用，如果SoftReference引用的对象被GC回收了，
      JVM就会把这个软引用加到与他关联的引用对列中

    3.弱引用WeakReference,和软引用对比，具有弱引用的对象具有更短暂的生命周期，在GC扫描到它所管辖的内存区域的过程中，
      一旦发现了只具有弱引用的对象，不管内存是否足够都会去回收它的内存，不过由于GC是一个优先级很低的线程，因此不一定会很快的发现那些只具有弱引用的对象，
      弱引用可以和一个引用队列联合使用，如果弱引用所引用的对象被GC回收，JVM就会把这个弱引用加到与他关联的引用队列中

    4.虚引用PhantomReference,就是形同虚设，虚引用不会决定对象的生命周期，如果一个对象仅有虚引用，那么他就跟没有任何引用一样，
      GC可以随时的回收它，虚引用主要用来跟踪对象呗GC回收的活动，虚引用必须跟引用队列联合使用，当GC回收一个对象时，如果发现它还有虚引用，
      就会在回收对象使用的内存之前，把这个虚引用加入到与之关联的引用队列中。可以通过判断引用队列中是否加入了虚引用来了解被引用的对象是否将要被回收。

(二)对象可及性的判断：

    箭头方向代表了引用的方向，所指向的对象是被引用的对象

    单条引用路径可及性判断：最弱的一个引用决定对象的可及性

    多条引用路径可及性判断：最强的一个引用决定对象的可及性

(三)使用软引用构建敏感数据的缓存：



(四)使用弱引用构建非敏感数据的缓存：